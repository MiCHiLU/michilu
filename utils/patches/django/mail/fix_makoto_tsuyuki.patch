Index: django/core/mail.py
===================================================================
--- django/core/mail.py (revision 6439)
+++ django/core/mail.py (working copy)
@@ -21,6 +21,9 @@
 # some spam filters.
 Charset.add_charset('utf-8', Charset.SHORTEST, Charset.QP, 'utf-8')
 
+Charset.add_charset('shift_jis', Charset.QP, Charset.BASE64, 'shift_jis')
+Charset.add_codec('shift_jis', 'cp932')
+
 # Default MIME type to use on attachments (if it is not explicitly given
 # and cannot be guessed).
 DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
@@ -79,11 +82,11 @@
                 result = []
                 for item in val.split(', '):
                     nm, addr = parseaddr(item)
-                    nm = str(Header(nm, settings.DEFAULT_CHARSET))
+                    nm = str(Header(nm, self.get_charset()))
                     result.append(formataddr((nm, str(addr))))
                 val = ', '.join(result)
             else:
-                val = Header(force_unicode(val), settings.DEFAULT_CHARSET)
+                val = Header(force_unicode(val), self.get_charset())
         MIMEText.__setitem__(self, name, val)
 
 class SafeMIMEMultipart(MIMEMultipart):
@@ -98,11 +101,11 @@
                 result = []
                 for item in val.split(', '):
                     nm, addr = parseaddr(item)
-                    nm = str(Header(nm, settings.DEFAULT_CHARSET))
+                    nm = str(Header(nm, self.get_charset()))
                     result.append(formataddr((nm, str(addr))))
                 val = ', '.join(result)
             else:
-                val = Header(force_unicode(val), settings.DEFAULT_CHARSET)
+                val = Header(force_unicode(val), self.get_charset())
         MIMEMultipart.__setitem__(self, name, val)
 
 class SMTPConnection(object):
@@ -225,10 +228,10 @@
 
     def message(self):
         encoding = self.encoding or settings.DEFAULT_CHARSET
-        msg = SafeMIMEText(smart_str(self.body, settings.DEFAULT_CHARSET), self.content_subtype, encoding)
+        msg = SafeMIMEText(smart_str(self.body, encoding), self.content_subtype, encoding)
         if self.attachments:
             body_msg = msg
-            msg = SafeMIMEMultipart(_subtype=self.multipart_subtype)
+            msg = SafeMIMEMultipart(_subtype=self.multipart_subtype, charset=encoding)
             if self.body:
                 msg.attach(body_msg)
             for attachment in self.attachments:
@@ -236,7 +239,13 @@
                     msg.attach(attachment)
                 else:
                     msg.attach(self._create_attachment(*attachment))
-        msg['Subject'] = self.subject
+            try:
+                self.subject.encode('ascii')
+                msg['Subject'] = self.subject
+            except UnicodeEncodeError:
+                msg['Subject'] = str(Header(force_unicode(self.subject), encoding))
+        else:
+            msg['Subject'] = self.subject
         msg['From'] = self.from_email
         msg['To'] = ', '.join(self.to)
         msg['Date'] = formatdate()
@@ -285,6 +294,7 @@
         Convert the filename, content, mimetype triple into a MIME attachment
         object.
         """
+        encoding = self.encoding or settings.DEFAULT_CHARSET
         if mimetype is None:
             mimetype, _ = mimetypes.guess_type(filename)
             if mimetype is None:
@@ -292,14 +302,19 @@
         basetype, subtype = mimetype.split('/', 1)
         if basetype == 'text':
             attachment = SafeMIMEText(smart_str(content,
-                settings.DEFAULT_CHARSET), subtype, settings.DEFAULT_CHARSET)
+                encoding), subtype, encoding)
         else:
             # Encode non-text attachments with base64.
             attachment = MIMEBase(basetype, subtype)
             attachment.set_payload(content)
             Encoders.encode_base64(attachment)
         if filename:
-            attachment.add_header('Content-Disposition', 'attachment', filename=filename)
+            try:
+                unicode(filename, 'ascii')
+                attachment.add_header('Content-Disposition', 'attachment', filename=filename)
+            except UnicodeDecodeError, e:
+                # This should be compatible to rfc2231. But too many bad clients exist that doesn't follow rfc2231.
+                attachment.add_header('Content-Disposition', 'attachment; filename=%s' % str(Header(force_unicode(filename), encoding)))
         return attachment
